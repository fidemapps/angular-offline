/*! Angular offline v0.1.0 | (c) 2016 Greg Berg√© | License MIT */
angular.module("offline",[]).service("connectionStatus",["$window","$rootScope",function(a,b){this.isOnline=function(){return a.navigator.onLine},this.$on=function(c,d){a.addEventListener(c,function(){b.$apply(d)})}}]).provider("offline",function(){var a,b=this;b.debug=function(a){return this._debug=a,this},this.$get=["$q","$window","$log","connectionStatus","$cacheFactory",function(c,d,e,f,g){function h(){return b._debug?e.debug.apply(e,["%cOffline","font-weight: bold"].concat([].slice.call(arguments))):void 0}function i(b,c){b===!0&&(b=a.defaults.cache||g.get("$http"));var d=b.info(c);d&&d.isExpired&&b.remove(c)}function j(){return s.stackCache||t}function k(){var a=j();return a.get("stack")||[]}function l(a){var b=j();b.put("stack",a)}function m(a){var b=k();b.push(a),l(b)}function n(){var a=k(),b=a.shift();return l(a),b}function o(a){m({url:a.url,data:a.data,headers:a.headers,method:a.method,offline:a.offline,timeout:angular.isNumber(a.timeout)?a.timeout:void 0})}function p(){var b=n();return b?(h("will process request",b),a(b).then(function(a){return h("request success",a),a},function(a){return h("request error",a),c.reject(a)})):c.reject(new Error("empty stack"))}function q(a,b){return encodeURIComponent(a).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,b?"%20":"+")}function r(a,b){if(!b)return a;var c=[];return angular.forEach(b,function(a,b){null===a||angular.isUndefined(a)||(angular.isArray(a)||(a=[a]),angular.forEach(a,function(a){angular.isObject(a)&&(a=angular.toJson(a)),c.push(q(b)+"="+q(a))}))}),a+(-1==a.indexOf("?")?"?":"&")+c.join("&")}var s={},t=g("offline-request-stack");return s.processStack=function(){return f.isOnline()?p().then(s.processStack)["catch"](function(a){return a&&"empty stack"===a.message?void h("all requests completed"):a&&"request queued"===a.message?void h("request has been queued, stop"):s.processStack()}):void 0},s.start=function(b){a=b,f.$on("online",s.processStack),s.processStack()},s.interceptors={request:function(a){return a.offline?(h("intercept request",a),a.cache||(a.cache=!0),"GET"===a.method?(f.isOnline()&&i(a.cache,r(a.url,a.params)),a):f.isOnline()?a:(o(a),c.reject(new Error("request queued")))):a}},s}]}).config(["$provide","$httpProvider",function(a,b){a.factory("offlineInterceptor",["offline",function(a){return a.interceptors}]),b.interceptors.push("offlineInterceptor")}]);
//# sourceMappingURL=angular-offline.min.js.map